base2=base2[-which(base2$Bloque=="N107"|base2$Bloque=="N1002"),]
v=tapply(base2$promedio,list(base2$BL,base2$Nube,base2$Solicitudes),var);v
pesos=data.frame(Solicitudes=rep(c(10,100,500),each=4),
Nube=rep(rep(c("Nube","Local"),each=2),3),
BL=rep(c("BL","ML"),6),w=as.vector(v))
base3=merge(base2,pesos,by=c("BL","Nube","Solicitudes"))
basemod=base3
modp1=lmer(promedio~BL*Nube+Solicitudes+(1|Bloque),weights = 1/w,data = basemod)
basemod
drop1(modp1,test = "Chisq")
summary(modp1)
confint(modp1)
summ1=summary(modp1)
res1=summ1$residuals
fit1=fitted(modp1)
dffp=data.frame(res1,fit1)
plot(fit1,res1)
#Esto ya no se revisa porque se trabaja considerando heteroscedasticidad
# leveneTest(promedio~BL*Nube*Solicitudes,data = basemod)
# leveneTest(res1~BL*Nube*Solicitudes,data = basemod)
ks.test(res1,"pnorm")
residuos=as.data.frame(res1)
res.stnd = scale(residuos$res1) # <- Residuos estandarizados.
qqPlot(res1)
qqPlot(res.stnd)
library(emmeans)
contlmer=emmeans (modp1,  pairwise~ Nube | BL, adjust="bonferroni");contlmer
# $contrasts
# BL = BL:
#  contrast     estimate       SE        df  t.ratio p.value
#  Nube - Local  -0.1968 0.005724 461019585  -34.392  <.0001
#
# BL = ML:
#  contrast     estimate       SE        df  t.ratio p.value
#  Nube - Local -73.2367 0.083794      6296 -874.004  <.0001
confint(contlmer)$contrast
contlmer=emmeans (modp1,  pairwise~ Nube | BL, adjust="bonferroni");contlmer
contlmer=emmeans (modp1,  pairwise~ BL | Nube, adjust="bonferroni");contlmer
# $contrasts
# BL = BL:
#  contrast     estimate       SE        df  t.ratio p.value
#  Nube - Local  -0.1968 0.005724 461019585  -34.392  <.0001
#
# BL = ML:
#  contrast     estimate       SE        df  t.ratio p.value
#  Nube - Local -73.2367 0.083794      6296 -874.004  <.0001
confint(contlmer)$contrast
View(base)
library(readxl)
library(lme4)
library(dplyr)
library(ggplot2)
library(qqplotr)
library(car)
library(lattice)
library(readxl)
library(lme4)
library(dplyr)
library(ggplot2)
library(qqplotr)
library(car)
library(lattice)
load("base.Rdata")
base2 <- base %>%
group_by(Bloque, BL,Nube, Solicitudes) %>%
summarise(promedio=mean(TiempoT),mediana=median(TiempoT))
View(base2)
m=tapply(base$Tiempo,list(base$BL,base$Nube,base$Solicitudes),mean);m
View(base)
m=tapply(base$TiempoT,list(base$BL,base$Nube,base$Solicitudes),mean);m
basemod=base2
modp0=lmer(promedio~BL*Nube*Solicitudes+(1|Bloque),data = base2)
drop1(modp0,test = "Chisq")
modp1=lmer(promedio~BL*Nube+Nube*Solicitudes+BL*Solicitudes+(1|Bloque),data = base2)
drop1(modp1,test = "Chisq")
modp1=lmer(promedio~BL*Nube+Nube*Solicitudes+(1|Bloque),data = base2)
drop1(modp1,test = "Chisq")
modp1=lmer(promedio~BL*Nube+Solicitudes+(1|Bloque),data = base2)
drop1(modp1,test = "Chisq")
summ1=summary(modp1)
res1=summ1$residuals
fit1=fitted(modp1)
dffp=data.frame(res1,fit1)
plot(fit1,res1)
leveneTest(promedio~BL*Nube*Solicitudes,data = base2)
leveneTest(res1~BL*Nube*Solicitudes,data = base2)
ks.test(res1,"pnorm")
residuos=as.data.frame(res1)
res.stnd = scale(residuos$res1) # <- Residuos estandarizados.
qqPlot(res1)
qqPlot(res.stnd)
base2=base2[-which(base2$Bloque=="N107"|base2$Bloque=="N1002"),]
v=tapply(base2$promedio,list(base2$BL,base2$Nube,base2$Solicitudes),var);v
pesos=data.frame(Solicitudes=rep(c(10,100,500),each=4),
Nube=rep(rep(c("Nube","Local"),each=2),3),
BL=rep(c("BL","ML"),6),w=as.vector(v))
base3=merge(base2,pesos,by=c("BL","Nube","Solicitudes"))
basemod=base3
modp1=lmer(promedio~BL*Nube+Solicitudes+(1|Bloque),weights = 1/w,data = basemod)
basemod
drop1(modp1,test = "Chisq")
summary(modp1)
confint(modp1)
summ1=summary(modp1)
res1=summ1$residuals
fit1=fitted(modp1)
dffp=data.frame(res1,fit1)
plot(fit1,res1)
#Esto ya no se revisa porque se trabaja considerando heteroscedasticidad
# leveneTest(promedio~BL*Nube*Solicitudes,data = basemod)
# leveneTest(res1~BL*Nube*Solicitudes,data = basemod)
ks.test(res1,"pnorm")
residuos=as.data.frame(res1)
res.stnd = scale(residuos$res1) # <- Residuos estandarizados.
qqPlot(res1)
qqPlot(res.stnd)
library(emmeans)
contlmer=emmeans (modp1,  pairwise~ BL | Nube, adjust="bonferroni");contlmer
# $contrasts
# BL = BL:
#  contrast     estimate       SE        df  t.ratio p.value
#  Nube - Local  -0.1968 0.005724 461019585  -34.392  <.0001
#
# BL = ML:
#  contrast     estimate       SE        df  t.ratio p.value
#  Nube - Local -73.2367 0.083794      6296 -874.004  <.0001
confint(contlmer)$contrast
summary(modp1)
anova(modp1)
summary(modp1)
drop1(modp1)
drop1(modp1,test = "Chisq")
contlmer=emmeans (modp1,  pairwise~ BL | Nube, adjust="bonferroni");contlmer
# $contrasts
# BL = BL:
#  contrast     estimate       SE        df  t.ratio p.value
#  Nube - Local  -0.1968 0.005724 461019585  -34.392  <.0001
#
# BL = ML:
#  contrast     estimate       SE        df  t.ratio p.value
#  Nube - Local -73.2367 0.083794      6296 -874.004  <.0001
confint(contlmer)$contrast
m=tapply(base$TiempoT,list(base$BL,base$Nube),mean);m
m=tapply(base2$TiempoT,list(base2$BL,base2$Nube),mean);m
View(base2)
contlmer
m=tapply(base$TiempoT,list(base$BL,base$Nube,base$Solicitudes),mean);m
# $contrasts
# BL = BL:
#  contrast     estimate       SE        df  t.ratio p.value
#  Nube - Local  -0.1968 0.005724 461019585  -34.392  <.0001
#
# BL = ML:
#  contrast     estimate       SE        df  t.ratio p.value
#  Nube - Local -73.2367 0.083794      6296 -874.004  <.0001
confint(contlmer)$contrast
m=tapply(base2$TiempoT,list(base2$BL,base2$Nube),mean);m
list(base2$BL,base2$Nube)
m=tapply(base2$TiempoT,base2$Nube,mean);m
modc=lm(TiempoT~Bloque,data = base)
fit=modc$fit
rc=base$TiempoT-fit+mean(base$TiempoT)
base$rc=rc
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_boxplot() +
labs(x = "Tratamiento", y = "Tiempo Centrado") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_barplot() +
labs(x = "Tratamiento", y = "Tiempo Centrado") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
xyplot(base$TiempoT~base$BL|base$Solicitudes,group=base$Nube,pch=18,type="a")
ggplot(base,aes(x=Nube,y=TiempoT,group = BL))+
stat_summary(fun.y = "mean",geom = "line",aes(linetype = BL))
ggplot(base,aes(x=Solicitudes,y=TiempoT,group = BL))+
stat_summary(fun.y = "mean",geom = "line",aes(linetype = BL))
ggplot(base,aes(x=Solicitudes,y=TiempoT,group = Nube))+
stat_summary(fun.y = "mean",geom = "line",aes(linetype = Nube))
library(readxl)
library(lme4)
library(dplyr)
library(ggplot2)
library(qqplotr)
library(car)
library(lattice)
base1=read_xlsx("final_registro_cloud.xlsx",col_names = FALSE)
names(base1)=c("Tiempo","BL","Nube","Denied","Right","Solicitudes","ID","Bloque")
base1$BL=as.factor(base1$BL)
base1$Solicitudes=as.factor(base1$Solicitudes)
base1$Nube=as.factor(base1$Nube)
base2=read_xlsx("final_registro_local.xlsx",col_names = FALSE)
names(base2)=c("Tiempo","BL","Nube","Denied","Right","Solicitudes","ID","Bloque")
base2$BL=as.factor(base2$BL)
base2$Solicitudes=as.factor(base2$Solicitudes)
base2$Nube=as.factor(base2$Nube)
base=rbind(base1,base2)
base$Bloque=as.factor(base$Bloque)
table(base$BL,base$Nube,base$Solicitudes)
str(base)
quitar1=which(base1$Bloque=="N109")
base1=base1[-quitar1,]
quitar2=which(base1$Bloque=="N1009")
base1=base1[-quitar2,]
quitar3=which(base1$Bloque=="N5009")
base1=base1[-quitar3,]
quitar4=which(base1$Bloque=="N5006")
base1=base1[-quitar4,]
quitar5=which(base2$Bloque=="L5006")
base2=base2[-quitar5,]
quitar6=which(base1$Bloque=="N5008")
base1=base1[-quitar6,]
quitar7=which(base2$Bloque=="L5008")
base2=base2[-quitar7,]
quitar8=which(base1$Bloque=="N5004")
base1=base1[-quitar8,]
quitar9=which(base2$Bloque=="L5004")
base2=base2[-quitar9,]
quitar10=which(base1$Bloque=="N1007")
base1=base1[-quitar10,]
quitar11=which(base2$Bloque=="L1007")
base2=base2[-quitar11,]
base2$Bloque=base1$Bloque
base=rbind(base1,base2)
table(base$BL,base$Nube,base$Solicitudes)
options(scipen = 999)
m=tapply(base$Tiempo,list(base$BL,base$Nube,base$Solicitudes),mean);m
v=tapply(base$Tiempo,list(base$BL,base$Nube,base$Solicitudes),var);v
base$TiempoT=base$Tiempo*100
m=tapply(base$TiempoT,list(base$BL,base$Nube,base$Solicitudes),mean);m
v=tapply(base$TiempoT,list(base$BL,base$Nube,base$Solicitudes),var);v
modc=lm(TiempoT~Bloque,data = base)
fit=modc$fit
rc=base$TiempoT-fit+mean(base$TiempoT)
base$rc=rc
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_boxplot() +
labs(x = "Tratamiento", y = "Tiempo Centrado") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
xyplot(base$TiempoT~base$BL|base$Solicitudes,group=base$Nube,pch=18,type="a")
xyplot(base$TiempoT~base$BL|base$Solicitudes,group=base$Nube,pch=18,type="a",xlab("Método"))
xyplot(base$TiempoT~base$BL|base$Solicitudes,group=base$Nube,pch=18,type="a",xlab="Método")
xyplot(base$TiempoT~base$BL|base$Solicitudes,group=base$Nube,pch=18,type="a",xlab="Método de detección")
xyplot(base$TiempoT~base$BL|base$Solicitudes,group=base$Nube,pch=18,type="a",xlab="Método de detección",ylab="Tiempo en centisegundos")
ggplot(base,aes(x=Nube,y=TiempoT,group = BL))+
stat_summary(fun.y = "mean",geom = "line",aes(linetype = BL))
ggplot(base,aes(x=Solicitudes,y=TiempoT,group = BL))+
stat_summary(fun.y = "mean",geom = "line",aes(linetype = BL))
ggplot(base,aes(x=Solicitudes,y=TiempoT,group = Nube))+
stat_summary(fun.y = "mean",geom = "line",aes(linetype = Nube))
res0=summ0$residuals
modp0=lmer(TiempoT~BL*Nube*Solicitudes+(1|Bloque),data = base)
summ0=summary(modp0)
res0=summ0$residuals
fit0=fitted(modp0)
dffp=data.frame(res0,fit0)
ggplot(data = dffp, aes(x = fit0, y = res0)) +
geom_point()
leveneTest(res0~BL*Nube*Solicitudes,data = base)
res0=summ0$residuals
fit0=fitted(modp0)
dffp=data.frame(res0,fit0)
ggplot(data = dffp, aes(x = fit0, y = res0)) +
geom_point()
leveneTest(res0~BL*Nube*Solicitudes,data = base)
ks.test(res0,"pnorm")
residuos=as.data.frame(res0)
res.stnd = scale(residuos$res0) # <- Residuos estandarizados.
ggplot(data = residuos, mapping = aes(sample = res.stnd )) + stat_qq_point() +                          stat_qq_line(color="blue") + stat_qq_band(fill=NA, color="blue") +
ylab("Residuos Estandarizados") + xlab("Norm Quantiles") + ggtitle("Normal QQ Plot")  +             labs(caption = "Grafico 1")+ theme_classic()+ ylim(-100, 100)
which(res0>20,)
#tapply(base$TiempoT,list(base$BL,base$Nube,base$Solicitudes),mean) ##El promedio es 19 y estos tienen un valor mayor a 100
baseA=base
baseA[c(5325,5327),9]=c(19.18961,19.18961)
modp0=lmer(TiempoT~BL*Nube*Solicitudes+(1|Bloque),data = baseA)
summ0=summary(modp0)
# Homocedasticidad
res0=summ0$residuals
fit0=fitted(modp0)
dffp=data.frame(res0,fit0)
ggplot(data = dffp, aes(x = fit0, y = res0)) +
geom_point()
leveneTest(res0~BL*Nube*Solicitudes,data = baseA)
# Normalidad
ks.test(res0,"pnorm")
residuos=as.data.frame(res0)
res.stnd = scale(residuos$res0) # <- Residuos estandarizados.
ggplot(data = residuos, mapping = aes(sample = res.stnd )) + stat_qq_point() +                          stat_qq_line(color="blue") + stat_qq_band(fill=NA, color="blue") +
ylab("Residuos Estandarizados") + xlab("Norm Quantiles") + ggtitle("Normal QQ Plot")  +             labs(caption = "Grafico 1")+ theme_classic()+ ylim(-100, 100)
modp1=glmer(TiempoT~BL*Nube*Solicitudes+(1|Bloque),family = Gamma(link = "log"),data = base)
summ=summary(modp1)
summ
res1=summ$residuals
fit1=fitted(modp1)
dffp1=data.frame(res1,fit1)
ggplot(data = dffp, aes(x = fit1, y = res1)) +
geom_point()
leveneTest(res1~BL*Nube*Solicitudes,data = base)
ks.test(res1,"pnorm")
residuos1=as.data.frame(res1)
res.stnd1 = scale(residuos1$res1) # <- Residuos estandarizados.
ggplot(data = residuos1, mapping = aes(sample = res.stnd1 )) + stat_qq_point() +                          stat_qq_line(color="blue") + stat_qq_band(fill=NA, color="blue") +
ylab("Residuos Estandarizados") + xlab("Norm Quantiles") + ggtitle("Normal QQ Plot")  +             labs(caption = "Grafico 1")+ theme_classic()+ ylim(-100, 100)
which(res1>75);which(res.stnd1>75) ## Se trata del mismo
base[1465,]
0.09379336  ## Es el promedio del tratamiento que es BL,Nube y 500 y Tarda 9!
baseB=base
baseB[1465,9]=0.09379336
modp1=glmer(TiempoT~BL*Nube*Solicitudes+(1|Bloque),family = Gamma(link = "log"),data = baseB)
#modp2=glmer(TiempoT~BL*Nube+Solicitudes+BL*Solicitudes+Nube*Solicitudes+(1|Bloque),family = Gamma(link = "log"),data = baseB)
# Homocedasticidad
res1=summ$residuals
fit1=fitted(modp1)
dffp1=data.frame(res1,fit1)
ggplot(data = dffp, aes(x = fit1, y = res1)) +
geom_point()
leveneTest(res1~BL*Nube*Solicitudes,data = base)
# Normalidad
ks.test(res1,"pnorm")
residuos1=as.data.frame(res1)
res.stnd1 = scale(residuos1$res1) # <- Residuos estandarizados.
ggplot(data = residuos1, mapping = aes(sample = res.stnd1 )) + stat_qq_point() +                          stat_qq_line(color="blue") + stat_qq_band(fill=NA, color="blue") +
ylab("Residuos Estandarizados") + xlab("Norm Quantiles") + ggtitle("Normal QQ Plot")  + labs(caption = "Grafico 1")+ theme_classic()+ ylim(-100, 100)
summary(modp1)
View(base)
rm(base1);rm(base2)
save(base,file = "base.Rdata")
base2 <- base %>%
group_by(Bloque, BL,Nube, Solicitudes) %>%
summarise(promedio=mean(TiempoT),mediana=median(TiempoT))
base2$Bloque=as.factor(base2$Bloque)
base2
basemod=base2
modp0=lmer(promedio~BL*Nube*Solicitudes+(1|Bloque),data = base2)
drop1(modp0,test = "Chisq")
modp1=lmer(promedio~BL*Nube+Nube*Solicitudes+BL*Solicitudes+(1|Bloque),data = base2)
drop1(modp1,test = "Chisq")
modp1=lmer(promedio~BL*Nube+Nube*Solicitudes+(1|Bloque),data = base2)
drop1(modp1,test = "Chisq")
modp1=lmer(promedio~BL*Nube+Solicitudes+(1|Bloque),data = base2)
drop1(modp1,test = "Chisq")
summ1=summary(modp1)
res1=summ1$residuals
fit1=fitted(modp1)
dffp=data.frame(res1,fit1)
plot(fit1,res1)
leveneTest(promedio~BL*Nube*Solicitudes,data = base2)
leveneTest(res1~BL*Nube*Solicitudes,data = base2)
ks.test(res1,"pnorm")
residuos=as.data.frame(res1)
res.stnd = scale(residuos$res1) # <- Residuos estandarizados.
qqPlot(res1)
qqPlot(res.stnd)
base2=base2[-which(base2$Bloque=="N107"|base2$Bloque=="N1002"),]
v=tapply(base2$promedio,list(base2$BL,base2$Nube,base2$Solicitudes),var);v
pesos=data.frame(Solicitudes=rep(c(10,100,500),each=4),
Nube=rep(rep(c("Nube","Local"),each=2),3),
BL=rep(c("BL","ML"),6),w=as.vector(v))
base3=merge(base2,pesos,by=c("BL","Nube","Solicitudes"))
basemod=base3
modp1=lmer(promedio~BL*Nube+Solicitudes+(1|Bloque),weights = 1/w,data = basemod)
basemod
drop1(modp1,test = "Chisq")
summary(modp1)
confint(modp1)
summ1=summary(modp1)
res1=summ1$residuals
fit1=fitted(modp1)
dffp=data.frame(res1,fit1)
plot(fit1,res1)
#Esto ya no se revisa porque se trabaja considerando heteroscedasticidad
# leveneTest(promedio~BL*Nube*Solicitudes,data = basemod)
# leveneTest(res1~BL*Nube*Solicitudes,data = basemod)
ks.test(res1,"pnorm")
residuos=as.data.frame(res1)
res.stnd = scale(residuos$res1) # <- Residuos estandarizados.
qqPlot(res1)
qqPlot(res.stnd)
library(emmeans)
contlmer=emmeans (modp1,  pairwise~ BL | Nube, adjust="bonferroni");contlmer
contlmer=emmeans (modp1,  pairwise~ BL | Nube, adjust="bonferroni");contlmer
confint(contlmer)
library(readxl)
library(lme4)
library(dplyr)
library(ggplot2)
library(qqplotr)
library(car)
library(lattice)
library(emmeans)
base1=read_xlsx("final_registro_cloud.xlsx",col_names = FALSE)
names(base1)=c("Tiempo","BL","Nube","Denied","Right","Solicitudes","ID","Bloque")
base1$BL=as.factor(base1$BL)
base1$Solicitudes=as.factor(base1$Solicitudes)
base1$Nube=as.factor(base1$Nube)
base2=read_xlsx("final_registro_local.xlsx",col_names = FALSE)
names(base2)=c("Tiempo","BL","Nube","Denied","Right","Solicitudes","ID","Bloque")
base2$BL=as.factor(base2$BL)
base2$Solicitudes=as.factor(base2$Solicitudes)
base2$Nube=as.factor(base2$Nube)
base=rbind(base1,base2)
base$Bloque=as.factor(base$Bloque)
table(base$BL,base$Nube,base$Solicitudes)
str(base)
quitar1=which(base1$Bloque=="N109")
base1=base1[-quitar1,]
quitar2=which(base1$Bloque=="N1009")
base1=base1[-quitar2,]
quitar3=which(base1$Bloque=="N5009")
base1=base1[-quitar3,]
quitar4=which(base1$Bloque=="N5006")
base1=base1[-quitar4,]
quitar5=which(base2$Bloque=="L5006")
base2=base2[-quitar5,]
quitar6=which(base1$Bloque=="N5008")
base1=base1[-quitar6,]
quitar7=which(base2$Bloque=="L5008")
base2=base2[-quitar7,]
quitar8=which(base1$Bloque=="N5004")
base1=base1[-quitar8,]
quitar9=which(base2$Bloque=="L5004")
base2=base2[-quitar9,]
quitar10=which(base1$Bloque=="N1007")
base1=base1[-quitar10,]
quitar11=which(base2$Bloque=="L1007")
base2=base2[-quitar11,]
base2$Bloque=base1$Bloque
base=rbind(base1,base2)
table(base$BL,base$Nube,base$Solicitudes)
options(scipen = 999)
m=tapply(base$Tiempo,list(base$BL,base$Nube,base$Solicitudes),mean);m
v=tapply(base$Tiempo,list(base$BL,base$Nube,base$Solicitudes),var);v
base$TiempoT=base$Tiempo*100
m=tapply(base$TiempoT,list(base$BL,base$Nube,base$Solicitudes),mean);m
v=tapply(base$TiempoT,list(base$BL,base$Nube,base$Solicitudes),var);v
modc=lm(TiempoT~Bloque,data = base)
fit=modc$fit
rc=base$TiempoT-fit+mean(base$TiempoT)
base$rc=rc
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_boxplot() +
labs(x = "Tratamiento", y = "Tiempo Centrado") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
modc=lm(TiempoT~Bloque,data = base)
fit=modc$fit
rc=base$TiempoT-fit+mean(base$TiempoT)
base$rc=rc
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_point() +
labs(x = "Tratamiento", y = "Tiempo Centrado") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
modc=lm(TiempoT~Bloque,data = base)
fit=modc$fit
rc=base$TiempoT-fit+mean(base$TiempoT)
base$rc=rc
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_point() +
labs(x = "Tratamiento", y = "Tiempo Centrado") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
stat_summary(fun.y = mean, geom = "point", color = "red", size = 3)
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_point() +
labs(x = "Tratamiento", y = "Tiempo Centrado",title = "Observaciones y promedio por tratamiento") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
stat_summary(fun.y = mean, geom = "point", color = "red", size = 3)
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_point() +
labs(x = "Tratamiento", y = "Tiempo Centrado",title = "Observaciones y promedio por tratamiento") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
stat_summary(fun.y = mean, geom = "point", color = "red", size = 1)
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_point() +
labs(x = "Tratamiento", y = "Tiempo Centrado",title = "Observaciones y promedio por tratamiento") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
stat_summary(fun.y = mean, geom = "point", color = "red", size = 1.5)
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_point() +
labs(x = "Tratamiento", y = "Tiempo Centrado",title = "Observaciones y promedio por tratamiento") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
stat_summary(fun.y = mean, geom = "point", color = "red", size = 1.5)+theme_bw()
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_point() +
labs(x = "Tratamiento", y = "Tiempo Centrado",title = "Observaciones y promedio por tratamiento") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
stat_summary(fun.y = mean, geom = "point", color = "red", size = 1.5)+theme_minimal()
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_point() +
labs(x = "Tratamiento", y = "Tiempo Centrado",title = "Observaciones y promedio por tratamiento") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
stat_summary(fun.y = mean, geom = "point", color = "red", size = 1.5)
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_point() +
labs(x = "Tratamiento", y = "Tiempo Centrado",title = "Observaciones y promedio por tratamiento") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
stat_summary(fun.y = mean, geom = "point", color = "red", size = 1.5)+
geom_hline(yintercept = media_general, linetype = "dashed", color = "blue")
ggplot(base, aes(x = interaction(BL, Nube, Solicitudes), y = rc)) +
geom_point() +
labs(x = "Tratamiento", y = "Tiempo Centrado",title = "Observaciones y promedio por tratamiento") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
stat_summary(fun.y = mean, geom = "point", color = "red", size = 1.5)+
geom_hline(yintercept = mean(rc), linetype = "dashed", color = "blue")
xyplot(base$TiempoT~base$BL|base$Solicitudes,group=base$Nube,pch=18,type="a",xlab="Método de detección",ylab="Tiempo en centisegundos",title="In")
xyplot(base$TiempoT~base$BL|base$Solicitudes,group=base$Nube,pch=18,type="a",xlab="Método de detección",ylab="Tiempo en centisegundos",main="a")
xyplot(base$TiempoT~base$BL|base$Solicitudes,group=base$Nube,pch=18,type="a",xlab="Método de detección",ylab="Tiempo en centisegundos",main="Gráfico de interacción triple")
ggplot(base,aes(x=Nube,y=TiempoT,group = BL))+
stat_summary(fun.y = "mean",geom = "line",aes(linetype = BL))+labs(title="a")
ggplot(base,aes(x=Nube,y=TiempoT,group = BL))+
stat_summary(fun.y = "mean",geom = "line",aes(linetype = BL))+labs(title="Interacción entre Ubicación y Método")
ggplot(base,aes(x=Solicitudes,y=TiempoT,group = BL))+
stat_summary(fun.y = "mean",geom = "line",aes(linetype = BL))+labs(title="Interacción entre Solicitudes y Método")
ggplot(base,aes(x=Solicitudes,y=TiempoT,group = Nube))+
stat_summary(fun.y = "mean",geom = "line",aes(linetype = Nube))+labs(title="Interacción entre Ubicación y Solicitudes")
